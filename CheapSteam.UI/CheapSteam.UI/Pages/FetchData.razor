@page "/fetchdata"

<PageTitle>数据查询</PageTitle>

@using CheapSteam.UI.Data
@using System.ComponentModel
@using AntDesign.TableModels
@inject ScraperDbContext DataContext

<h1>数据查询</h1>

@if (goods == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Card Class="shadow-sm mb-3" Title="筛选器">
        <Body>
            <div class="d-flex" style="flex-wrap: wrap;">
                <Checkbox @bind-Checked="showBuffSellPrice">
                    BUFF 出售价
                </Checkbox>
                <Checkbox @bind-Checked="showBuffBuyPrice">
                    BUFF 收购价
                </Checkbox>
                <Checkbox @bind-Checked="showSteamSellPrice">
                    Steam 出售价
                </Checkbox>
                <Checkbox @bind-Checked="showSteamBuyPrice">
                    Steam 收购价
                </Checkbox>
                <Checkbox @bind-Checked="showSteamBuyRadio">
                    求购价比例
                </Checkbox>
                <Checkbox @bind-Checked="showSteamSellRadio">
                    出售价比例
                </Checkbox>
                <Checkbox @bind-Checked="showSteamSellNum">
                    Steam 求购数
                </Checkbox>
                <Checkbox @bind-Checked="showBuffSellNum">
                    BUFF 收购数
                </Checkbox>
                <Checkbox @bind-Checked="showUpdateTime">
                    更新时间
                </Checkbox>
            </div>
        </Body>
    </Card>
    <Card Class="shadow-sm" Title="数据">
        <Extra>
                <a @onclick="RefreshTable">刷新</a>
            <Popconfirm Title="确定要清空表单?"
                    OnConfirm="Confirm"
                    OkText="确定"
                    CancelText="取消">
                <a>清空表单</a>
            </Popconfirm>
        </Extra>
        <Body>
            <Table Class="fix-pagination" @ref="table"
               TItem="Goods"
               DataSource="@goods"
               Total="_total"
               @bind-PageIndex="_pageIndex"
               @bind-PageSize="_pageSize"
               @bind-SelectedRows="selectedRows">
                <Column @bind-Field="@context.Name" Title="名称" Filterable/>
                <Column @bind-Field="@context.BuffSellPrice" Sortable Title="BUFF 出售价" Hidden="@(!showBuffSellPrice)" Filterable />
                <Column @bind-Field="@context.BuffBuyPrice" Sortable Title="BUFF 收购价" Hidden="@(!showBuffBuyPrice)" Filterable />
                <Column @bind-Field="@context.SteamSellPrice" Sortable Title="Steam 出售价" Hidden="@(!showSteamSellPrice)" Filterable />
                <Column @bind-Field="@context.SteamBuyPrice" Sortable Title="Steam 收购价" Hidden="@(!showSteamBuyPrice)" Filterable />
                <Column @bind-Field="@context.SteamBuyRadio" Sortable Title="求购价比例" Hidden="@(!showSteamBuyRadio)" Filterable />
                <Column @bind-Field="@context.SteamSellRadio" Sortable Title="出售价比例" Hidden="@(!showSteamSellRadio)" Filterable />
                <Column @bind-Field="@context.SteamSellNum" Sortable Title="Steam 求购数" Hidden="@(!showSteamSellNum)" Filterable />
                <Column @bind-Field="@context.BuffSellNum" Sortable Title="BUFF 收购数" Hidden="@(!showBuffSellNum)" Filterable />
                <Column @bind-Field="@context.UpdateTime" Format="MM-dd hh:mm" Sortable Title="更新时间" Hidden="@(!showUpdateTime)" Filterable />
            </Table>
        </Body>
    </Card>
}

@using System.Text.Json;
@using ChpStmScraper.Models
@using EFCore.BulkExtensions
@code {

    Goods[] goods;

    IEnumerable<Goods> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;
    bool showBuffSellPrice = true;
    bool showBuffBuyPrice = false;
    bool showSteamSellPrice = true;
    bool showSteamBuyPrice = false;
    bool showSteamBuyRadio = true;
    bool showSteamSellRadio = true;
    bool showUpdateTime = true;
    bool showBuffSellNum = false;
    bool showSteamSellNum = false;
    Timer refreshTimer;


    protected override async Task OnInitializedAsync()
    {
        await RefreshTable();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            refreshTimer = new Timer(state =>
            {
            //自动刷新日志界面
            this.InvokeAsync(async () =>
            {
                await RefreshTable();
            });
            });
            if(Index.SwitchValue) refreshTimer.Change(0, 5000);
        }
    }
    private static object o = new object();

    private async Task Confirm()
    {
        await Task.Run(() =>
        {
            lock (o)
            {
                DataContext.Goods.RemoveRange(DataContext.Goods.ToArray());
                DataContext.SaveChanges();
            //DataContext.Truncate<Goods>();
            //DataContext.BulkSaveChanges();
        }
        });
        await RefreshTable();
    }
    private async Task RefreshTable()
    {
        await Task.Run(() =>
        {
            lock (Services.ScraperService.ContextLock)
            {
                var goodsQuerry = DataContext.Goods.Where(g => g.BuffSellPrice <= Configuration.MaxSellPrice
                && g.BuffSellNum >= Configuration.MinSellCount
                && g.BuffSellPrice >= Configuration.MinSellPrice);
                //.OrderBy(g => g.SteamBuyRadio).Take(num);
                _total = goodsQuerry.Count();
                goods = goodsQuerry.ToArray();
            }
            this.InvokeAsync(() => this.StateHasChanged());
        });
    }
}